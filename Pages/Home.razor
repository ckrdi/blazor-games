@page "/"
@using System.Timers
@inject IJSRuntime JsRuntime;

<PageTitle>Snake</PageTitle>

<h1>Snake Game</h1>

<div class="alert alert-dismissible alert-secondary">
	<strong>Rules:</strong>
	Collect as many yellow tiles as you can without running into a wall or yourself. To start, press any of the arrow keys.
	Keyboard inputs (←, →, ↑, ↓) are supported if you <i>click on the board</i>. You might want to select the difficulty first and then run a new game.
	Difficulty set to Medium as default.
</div>
<div class="row mx-0 mb-3">
	<div class="row mb-1">
		Select Difficulty First:
	</div>
	<div class="m-0 p-0 d-flex gap-2">
		<button class="btn btn-secondary mr-1 @(Interval == 500 ? "active" : "")" @onclick="() => Interval = 500">Easy</button>
		<button class="btn btn-secondary mr-1 @(Interval == 300 ? "active" : "")" @onclick="() => Interval = 300">Medium</button>
		<button class="btn btn-secondary @(Interval == 100 ? "active" : "")" @onclick="() => Interval = 100">Hard</button>
	</div>
</div>
<div class="row controls mx-0 mb-3">
	<div class="row mb-1">
		Then Click:
	</div>
	<button class="btn btn-primary" @onclick="Reset">New Game</button>
</div>

@if (GameOver)
{
	<div class="row mx-0 mb-3">
		Game Over!
	</div>
}

<div @onkeydown="@OnKeyDown" tabindex="0">
	<div class="row">
		<svg height="@SvgHeight" width="@SvgWidth" viewBox="0 0 @Board.GetLength(0) @Board.GetLength(1)" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg">
			@for (int i = 0; i < Board.GetLength(0); i++)
			{
				@for (int j = 0; j < Board.GetLength(1); j++)
				{
					<rect fill="@(Board[i, j] is Tile.Snake ? "#008080" : Board[i, j] is Tile.Food ? "#daa520" : "#24292e")" stroke="#24292e" stroke-width="0" width=".95" height=".95" x="@(i + .025)" y="@(j + .025)" />
				}
			}
		</svg>
	</div>
	<div class="row d-flex justify-content-center mb-3">
		<div class="controls d-flex flex-column gap-2">
			<div class="d-flex justify-content-center">
				<button class="btn btn-primary" @onclick="() => { CurrentDirection = Direction.Up; Timer.Enabled = !GameOver && true; }">↑</button>
			</div>
			<div class="d-flex justify-content-between">
				<button class="btn btn-primary" @onclick="() => { CurrentDirection = Direction.Left; Timer.Enabled = !GameOver && true; }">←</button>
				<button class="btn btn-primary" @onclick="() => { CurrentDirection = Direction.Right; Timer.Enabled = !GameOver && true; }">→</button>
			</div>
			<div class="d-flex justify-content-center">
				<button class="btn btn-primary" @onclick="() => { CurrentDirection = Direction.Down; Timer.Enabled = !GameOver && true; }">↓</button>
			</div>
		</div>
	</div>

</div>
<style>
	.controls {
	margin-top: 1rem;
	width: 160px;
	}
</style>

@code
{
	string SvgHeight = "60vmin";
	string SvgWidth = "60vmin";

	public struct WindowDimension
	{
		public int Height { get; set; }
		public int Width { get; set; }
	}

	protected override async Task OnInitializedAsync()
	{
		const int PAGE_BREAK = 641;
		var dimension = await JsRuntime.InvokeAsync<WindowDimension>("getWindowDimensions");
		if (dimension.Width < PAGE_BREAK)
		{
			SvgHeight = "100vmin";
			SvgWidth = "100vmin";
		}

		await base.OnInitializedAsync();
	}

	enum Direction
	{
		None = 0,
		Up,
		Down,
		Left,
		Right,
	}

	enum Tile
	{
		Open = 0,
		Snake,
		Food,
	}

	Random random = new Random();
	int Width = 15;
	int Height = 15;
	bool GameOver = false;
	Direction CurrentDirection;

	(int I, int J)? _snakeHead;
	(int I, int J) SnakeHead
	{
		get
		{
			if (_snakeHead is null)
			{
				Reset();
			}
			return _snakeHead.Value;
		}
	}

	Queue<(int I, int J)> _snakeQueue;
	Queue<(int I, int J)> SnakeQueue
	{
		get
		{
			if (_snakeQueue is null)
			{
				Reset();
			}
			return _snakeQueue;
		}
	}

	Tile[,] _board;
	Tile[,] Board
	{
		get
		{
			if (_board is null)
			{
				Reset();
			}
			return _board;
		}
	}

	Timer _timer;
	Timer Timer
	{
		get
		{
			if (_timer is null)
			{
				Reset();
			}
			return _timer;
		}
	}

	enum Difficulty
	{
		Easy = 0,
		Medium,
		Hard
	}

	int Interval = 300;

	void Reset()
	{
		if (_timer is not null)
		{
			_timer.Enabled = false;
		}

		_snakeQueue = new Queue<(int I, int J)>();
		(int I, int J) snakeBody = (3, 7);
		_snakeHead = (4, 7);
		_snakeQueue.Enqueue(snakeBody);
		_snakeQueue.Enqueue(SnakeHead);

		_board = new Tile[Width, Height];
		_board[snakeBody.I, snakeBody.J] = Tile.Snake;
		_board[SnakeHead.I, SnakeHead.J] = Tile.Snake;

		SetFoodPosition(_board);
		GameOver = false;

		_timer = new Timer(Interval);
		_timer.Elapsed += (_, _) => { Update(); };
		_timer.Enabled = false;
		StateHasChanged();
	}

	void OnKeyDown(KeyboardEventArgs e)
	{
		switch (e.Key)
		{
			case "ArrowLeft": CurrentDirection = Direction.Left; break;
			case "ArrowRight": CurrentDirection = Direction.Right; break;
			case "ArrowUp": CurrentDirection = Direction.Up; break;
			case "ArrowDown": CurrentDirection = Direction.Down; break;
			default: return;
		}
		Timer.Enabled = !GameOver && true;
	}

	void SetFoodPosition(Tile[,] board)
	{
		List<(int X, int Y)> possibleCoordinates = new List<(int X, int Y)>();
		for (int i = 0; i < board.GetLength(0); i++)
		{
			for (int j = 0; j < board.GetLength(1); j++)
			{
				if (board[i, j] == Tile.Open)
				{
					possibleCoordinates.Add((i, j));
				}
			}
		}
		int index = random.Next(possibleCoordinates.Count);
		(int X, int Y) = possibleCoordinates[index];
		board[X, Y] = Tile.Food;
	}

	void Update()
	{
		if (GameOver || !Timer.Enabled)
		{
			Timer.Enabled = false;
			return;
		}
		(int I, int J) head = SnakeHead;
		(int I, int J) next = CurrentDirection switch
		{
			Direction.Left => (head.I - 1, head.J),
			Direction.Right => (head.I + 1, head.J),
			Direction.Up => (head.I, head.J - 1),
			Direction.Down => (head.I, head.J + 1),
			_ => throw new NotImplementedException(),
		};
		_snakeHead = next;

		if (next.J < 0 || next.I < 0 ||
			next.J > Board.GetLength(1) - 1 ||
			next.I > Board.GetLength(0) - 1 ||
			Board[next.I, next.J] == Tile.Snake)
		{
			GameOver = true;
			Timer.Enabled = false;
		}
		else if (Board[next.I, next.J] == Tile.Food)
		{
			SetFoodPosition(Board);
			SnakeQueue.Enqueue(next);
			Board[next.I, next.J] = Tile.Snake;
		}
		else
		{
			(int I, int J) tail = SnakeQueue.Dequeue();
			Board[tail.I, tail.J] = Tile.Open;
			SnakeQueue.Enqueue(next);
			Board[next.I, next.J] = Tile.Snake;
		}

		StateHasChanged();
	}
}
